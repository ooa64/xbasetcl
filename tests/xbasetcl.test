package require tcltest

if {[catch {package require xbasetcl} result]} {
    # build environment
    if {[info exists env(XBASETCLDLL)]} {
        # for loadable module
        load $env(XBASETCLDLL) xbasetcl
    } else {
        # for static shell
        load {} xbasetcl
    }
}

set test_schema [lrange {
    {F1 C 10 0}
    {F2 L 1 0}
    {F3 N 10 0}
    {F4 D 8 0}
    {F5 F 10 2}
} 0 end]

set test_records [lrange {
    {1st T 11 20010101 11.11}
    {2nd F 22 20020202 22.22}
    {3rd ? 33 20030303 33.33}
} 0 end]

set test_records_tcl_boolean [lrange {
    {1st Y 11 20010101 11.11}
    {2nd N 22 20020202 22.22}
    {3rd ? 33 20030303 33.33}
} 0 end]

set test_memoschema [lrange {
    {F1 C 10 0}
    {F2 M 10 0}
} 0 end]

set test_memorecords [lrange {
    {1st {}}
    {2nd {This is a second record}}
    {3nd {}}
    {4nd {This is a last record}}
} 0 end]

tcltest::test xbase-1.0 "load extension" {
    if {[info exists env(XBASEDLL)]} {
        load $env(XBASEDLL) Xbasetcl
    }
} {}

tcltest::test xbase-1.1.1 "empty" {
    catch xbase result
    string range $result 0 40
} "wrong # args: should be \"xbase command\""

tcltest::test xbase-1.1.2 "unknown" {
    catch {xbase unknown} result
    string range $result 0 20
} {bad command "unknown"}

tcltest::test xbase-1.2 "version parameters error" {
    catch {xbase ver foo} result
    set result
} "wrong # args: should be \"xbase version\""

tcltest::test xbase-1.3 "version" {
    xbase version
} {4.1.4}

tcltest::test xbase-1.4 "version abbrev" {
    xbase ver
} {4.1.4}

tcltest::test xbase-1.5 "date format parameters error" {
    catch {xbase dateformat foo bar} result
    set result
} "wrong # args: should be \"xbase dateformat ?format?\""

tcltest::test xbase-1.6 "date format" {
    set result ""
    lappend result [xbase dateformat]
    lappend result [xbase dateform bla-bla-bla]
    lappend result [xbase date [lindex $result 0]]
} {MM/DD/YY bla-bla-bla MM/DD/YY}

tcltest::test xbase-1.7 "init dbf parameters error" {
    catch {xbase dbf} result
    set result
} "wrong # args: should be \"xbase dbf name\""

tcltest::test xbase-1.8 "init dbf parameters error" {
    catch {xbase dbf foo bar} result
    set result
} "wrong # args: should be \"xbase dbf name\""

tcltest::test xbase-1.9 "init dbf object" -body {
    xbase dbf testdbf
} -cleanup {
    rename testdbf {}
} -result {testdbf}

foreach {c e r} {
    "version"           0 4 
    "status"            0 closed
    "name"              0 ./
    "schema"            0 {}
    "schema -fieldno F" 1 {field does not exist}
    "size"              0 0
    "blank"             1 {Database not open}
    "fields"            0 {}
    "fields F 1"        1 {invalid field name F}
    "record 1"          1 {database not open}
    "append 1"          1 {database not open}
    "update 1"          1 {database not open}
    "deleted 1"         1 {Invalid Record Number}
    "first"             1 {Empty Table or Index}
    "last"              1 {Empty Table or Index}
    "next"              1 {Empty Table or Index}
    "prev"              1 {Empty Table or Index}
    "goto 1"            1 {Database not open}
    "pack"              1 {database not open}
    "zap"               1 {database not open}
    "commit"            1 {database not open}
} {
    tcltest::test xbase-1.10-[string map {" " -} $c] "unopened dbf errors" -setup {
        xbase dbf testdbf
    } -body {
        list [catch {testdbf {*}$c} result] $result
    } -cleanup {
        rename testdbf {}
    } -result [list $e $r] 
    unset c r
}

tcltest::test xbase-2.1 "create dbf parameters error" -setup {xbase dbf testdbf} -body {
    list [catch {testdbf create} result] $result
} -cleanup {catch {rename testdbf ""}} -result [list 1 "wrong # args: should be \"testdbf create ?-overlay? filename schema\""]

tcltest::test xbase-2.2 "create dbf parameters error" -setup {xbase dbf testdbf} -body {
    list [catch {testdbf create test foo bar} result] $result
} -cleanup {catch {rename testdbf ""}} -result [list 1 {bad option bar}]

tcltest::test xbase-2.3 "create dbf schema error" -setup {xbase dbf testdbf} -body {
    list [catch {testdbf create test {}} result] $result
} -cleanup {catch {rename testdbf ""}} -result [list 1 {empty schema}]

tcltest::test xbase-2.4 "create dbf schema error" -setup {xbase dbf testdbf} -body {
    list [catch {testdbf create test {{F}}} result] $result
} -cleanup {catch {rename testdbf ""}} -result [list 1 "invalid schema, field #0"]

tcltest::test xbase-2.5 "create dbf schema error" -setup {xbase dbf testdbf} -body {
    list [catch {testdbf create test {{F N 10}}} result] $result
} -cleanup {catch {rename testdbf ""}} -result [list 1 "invalid schema, field #0"]

tcltest::test xbase-2.6 "create dbf schema error" -setup {xbase dbf testdbf} -body {
    list [catch {testdbf create test {{F N 10 -1}}} result] $result
} -cleanup {catch {rename testdbf ""}} -result [list 1 "invalid fdec, field #0"]

tcltest::test xbase-2.7 "create dbf error" -setup {xbase dbf testdbf} -body {
    list [catch {testdbf create -overlay test {{F N 255 0}}} result] $result
} -cleanup {rename testdbf ""} -result [list 1 {Invalid Field Length}]

tcltest::test xbase-2.8 "create dbf error" -setup {xbase dbf testdbf} -body {
    list [catch {testdbf create -overlay test {{F N 10 255}}} result] $result
} -cleanup {catch {rename testdbf ""}} -result [list 1 {Invalid Field Length}]

tcltest::test xbase-2.9 "create dbf error" -setup {xbase dbf testdbf} -body {
    list [catch {testdbf create -overlay test {{F ? 10 0}}} result] $result
} -cleanup {catch {rename testdbf ""}} -result [list 1 {Unknown Field Type}]

tcltest::test xbase-2.10.0 "prepare" {
    list [xbase dbf testdbf] [xbase list]
} {testdbf {}}

tcltest::test xbase-2.10.1 "create dbf ok" {
    list [testdbf create -overlay test.dbf {{F N 10 0}}] [xbase list]
} [list [file nativename ./test.dbf] [list [file nativename ./test.dbf]]]

tcltest::test xbase-2.10.2 "open dbf misc" {
    list [testdbf status] [testdbf schema]
} {open {{F N 10 0}}}

tcltest::test xbase-2.10.3 "delete created dbf" {
    testdbf close
    file delete test.dbf
    xbase list
} {}

tcltest::test xbase-2.10.3 "create dbf in home" {
    set result [testdbf create -overlay ~/__test__.dbf {{F N 10 0}}]
    testdbf close
    file delete ~/__test__.dbf
    set result
} [file nativename ~/__test__.dbf]

tcltest::test xbase-2.11 "create dbf test" {
    list [testdbf create test.dbf $test_schema] [xbase list]
} [list [file nativename ./test.dbf] [list [file nativename ./test.dbf]]]

tcltest::test xbase-2.12 "reopen dbf nonclosed" {
    list [catch {testdbf open unexistent} result] $result [xbase list]
} {1 {File not found} {}}

tcltest::test xbase-2.13 "close dbf" {
    list [testdbf close] [xbase list]
} {{} {}}

tcltest::test xbase-2.14 "open dbf error" {
    list [catch {testdbf open unexistent} result] $result
} {1 {File not found}}

tcltest::test xbase-2.15 "open dbf" {
    testdbf open test.dbf
} [file nativename ./test.dbf]

tcltest::test xbase-2.15.1 "dbf name" {
    testdbf name
} [file nativename ./test.dbf]

tcltest::test xbase-2.16 "dbf schema" {
    testdbf schema
} $test_schema

tcltest::test xbase-2.17 "dbf closed" {
    testdbf close
    rename testdbf ""
} {}

tcltest::test xbase-3.0 "dbf open" {
    xbase dbf testdbf
    testdbf create -overlay test.dbf $test_schema
} [file nativename ./test.dbf]

tcltest::test xbase-3.1.0 "dbf append" {
    set result {}
    foreach record $test_records_tcl_boolean {
        lappend result [testdbf append $record]
    }
    set result
} $test_records

tcltest::test xbase-3.1.1 "dbf update" {
    set result {}
    testdbf goto 1
    testdbf update [lindex $test_records 1]
    testdbf blank
    testdbf goto 1
    lappend result [testdbf record]
    testdbf record [lindex $test_records 2]
    testdbf update
    testdbf blank
    testdbf goto 1
    lappend result [testdbf record]
    set fields {}
    foreach i $test_schema {
        lappend fields [lindex $i 0]
    }
    testdbf fields $fields [lindex $test_records 0]
    testdbf update
    testdbf blank
    testdbf goto 1
    concat [list [testdbf record]] $result
} $test_records

tcltest::test xbase-3.2 "dbf position 0" {
    testdbf goto 2
    catch {testdbf goto 0} result
    lappend result [testdbf position]
} {Invalid Record Number 2}

tcltest::test xbase-3.3 "dbf position eof" {
    testdbf goto 2
    catch {testdbf goto [expr [testdbf size]+1]} result
    lappend result [testdbf position]
} {Invalid Record Number 2}

tcltest::test xbase-3.4 "dbf position" {
    set result [testdbf size]
    lappend result [testdbf first]
    while {[testdbf next]} {
        lappend result [testdbf position]
    }
    lappend result [testdbf last]
    while {[testdbf prev]} {
        lappend result [testdbf position]
    }
    lappend result [testdbf goto 1] [testdbf goto 2] [testdbf goto 3]
    lappend result [testdbf position]
    testdbf close
    testdbf open test.dbf
    lappend result [testdbf position]
    set result
} {3 1 2 3 3 2 1 1 2 3 3 0}

tcltest::test xbase-3.5 "dbf fields" {
    list \
        [testdbf goto 1] \
        [testdbf fields] \
        [testdbf field F1] \
        [testdbf field F2] \
        [testdbf field F3] \
        [testdbf field F4] \
        [testdbf field F5] \
        [testdbf field {F1 F2 F3 F4 F5}] \
        [testdbf field F1 1ST] \
        [testdbf field {F3 F5} {1 1.1}] \
        [testdbf field {F1 F3 F5}] \
        [testdbf record [lindex $test_records 0]]
} {1 {F1 F2 F3 F4 F5} 1st T 11 20010101 11.11 {1st T 11 20010101 11.11} 1ST {1 1.10} {1ST 1 1.10} {1st T 11 20010101 11.11}}

tcltest::test xbase-3.6 "dbf read" {
    set result {}
    testdbf first
    while {1} {
        lappend result [testdbf record]
        if {![testdbf next]} break
    }
    set result
} $test_records

tcltest::test xbase-3.7 "dbf deleted" -setup {
    catch {testdbf close}
    catch {rename testdbf ""}
    catch {file delete test.dbf}
    xbase dbf testdbf
    testdbf create test.dbf $test_schema
    foreach record $test_records {testdbf append $record}
} -body {
    set result {}
    testdbf first
    while {1} {
        lappend result [testdbf deleted]
        if {![testdbf next]} break
    }
    lappend result /
    testdbf first
    while {1} {
        lappend result [testdbf deleted 1]
        if {![testdbf next]} break
    }
    lappend result /
    testdbf close
    testdbf open test.dbf
    testdbf first
    while {1} {
        lappend result [testdbf deleted]
        if {![testdbf next]} break
    }
    lappend result /
    testdbf first
    while {1} {
        lappend result [testdbf deleted 0]
        if {![testdbf next]} break
    }
    lappend result /
    testdbf close
    testdbf open test.dbf
    testdbf first
    while {1} {
        lappend result [testdbf deleted]
        if {![testdbf next]} break
    }
    set result
} -cleanup {
    catch {testdbf close}
    catch {rename testdbf ""}
    catch {file delete test.dbf}
    xbase dbf testdbf
    testdbf create test.dbf $test_schema
    foreach record $test_records {testdbf append $record}
} -result {0 0 0 / 1 1 1 / 1 1 1 / 0 0 0 / 0 0 0}

tcltest::test xbase-3.8 "dbf blank" {
    list \
        [testdbf blank] \
        [testdbf append] \
        [testdbf goto 4] \
        [testdbf record] \
        [testdbf size]
} {{} {{} {} {} {} {}} 4 {{} {} {} {} {}} 4}

tcltest::test xbase-3.9 "dbf pack" {
    list \
        [testdbf size] \
        [testdbf goto 4] \
        [testdbf deleted 1] \
        [testdbf pack] \
        [testdbf position] \
        [testdbf size]
} {4 4 1 {} 1 3}

tcltest::test xbase-3.10 "dbf zap" {
    list \
        [testdbf size] \
        [testdbf goto 3] \
        [testdbf zap] \
        [testdbf position] \
        [testdbf size]
} {3 3 {} 0 0}

tcltest::test xbase-3.10.1 "append records back" {
    foreach record $test_records {
        lappend result [testdbf append $record]
    }
} {}

foreach memover {3 4} {

    tcltest::test xbase-4.$memover.1.0 "create file with memo w/o version" {
        xbase dbf -dbf$memover testmemo
        testmemo create -overlay testmemo.dbf $test_memoschema
    } [file nativename ./testmemo.dbf]

    tcltest::test xbase-4.$memover.1.1 "memo w/o version check" {
        list [testmemo append {{} memo}] [testmemo version]
    } [list {{} memo} $memover]

    tcltest::test xbase-4.$memover.1.2 "memo w/o version cleanup" {
        testmemo close
        file delete testmemo.dbf
        file delete testmemo.dbt
    } {}

    tcltest::test xbase-4.$memover.2 "create file with memo" {
        testmemo create testmemo.dbf $test_memoschema
    } [file nativename ./testmemo.dbf]

    tcltest::test xbase-4.$memover.3 "append some memos blank/append/update" {
        set result {}
        foreach record $test_memorecords {
            testmemo blank
            testmemo append
            lappend result [testmemo update $record]
        }
        set result
    } $test_memorecords

    tcltest::test xbase-4.$memover.4 "read some memos" {
        set result {}
        testmemo first
        lappend result [testmemo record]
        while {[testmemo next]} {
            lappend result [testmemo record]
        }
        set result
    } $test_memorecords

    tcltest::test xbase-4.$memover.5 "memo cleanup" {
        testmemo close
        file delete testmemo.dbf
        file delete testmemo.dbt
    } {}

    tcltest::test xbase-4.$memover.6 "create file with memo again" {
        testmemo create testmemo.dbf $test_memoschema
    } [file nativename ./testmemo.dbf]

    tcltest::test xbase-4.$memover.7 "append some memos using simple append" {
        set result {}
        foreach record $test_memorecords {
            lappend result [testmemo append $record]
        }
        set result
    } $test_memorecords

    tcltest::test xbase-4.$memover.8 "read some memos" {
        set result {}
        testmemo first
        lappend result [testmemo record]
        while {[testmemo next]} {
            lappend result [testmemo record]
        }
        set result
    } $test_memorecords

    tcltest::test xbase-4.$memover.9 "lost memos" {
       set result {}
       testmemo blank
       testmemo append
       set result
    } $test_memorecords

    tcltest::test xbase-4.$memover.10 "memos cleanup" {
        rename testmemo {}
        #file delete testmemo.dbf
        #file delete testmemo.dbt
    } {}

} ;# foreach memover

unset memover

foreach {indextype indexnum} {ndx 1 mdx 2} {

    tcltest::test xbase-5.$indexnum.1.0 "create file for index tests" {
        xbase dbf testi
        testi create -overlay testi.dbf $test_schema
    } [file nativename ./testi.dbf]

    tcltest::test xbase-5.$indexnum.1 "create simple $indextype indexes" {
        list \
            [testi index -$indextype testi1] \
            [testi index -$indextype testi2] \
            [testi1 create -overlay testi1.$indextype F1] \
            [testi2 create -overlay -unique testi2.$indextype F3]
    } [list testi1 testi2 [file nativename ./testi1.$indextype] [file nativename ./testi2.$indextype]]

    tcltest::test xbase-5.$indexnum.2.1 "simple $indextype misc 1" {
        list [testi1 dbf] [testi1 name] [testi1 type]
    } [list testi [file nativename ./testi1.$indextype] $indextype]

    tcltest::test xbase-5.$indexnum.2.1 "simple $indextype misc 2" {
        list [testi2 dbf] [testi2 name] [testi2 type]
    } [list testi [file nativename ./testi2.$indextype] $indextype]

    tcltest::test xbase-5.$indexnum.3.1 "simple $indextype reindex 1" {
        testi1 reindex
    } {}

    tcltest::test xbase-5.$indexnum.3.2 "simple $indextype reindex 2" {
        testi2 reindex
    } {}

    tcltest::test xbase-5.$indexnum.4 "simple $indextype index position" broken {
        set result [testi size]
        lappend result [testi1 first]
        while {[testi1 next]} {
            lappend result [testi position]
        }
        lappend result [testi1 last]
        while {[testi1 prev]} {
            lappend result [testi position]
        }
        lappend result [testi1 find 2nd] [testi position]
        lappend result [testi1 find none] [testi position]
        set result
    } {3 1 2 3 3 2 1 2 2 0 2}

    tcltest::test xbase-5.$indexnum.3 "add nonunique $indextype key" {
        testi goto 1
        catch {testi append} result
        concat [list $result] [testi size]
    } {{Key Not Unique} 3}

} ;# foreach indextype indexnum

unset indextype indexnum

tcltest::test xbase-6.1 "create simple testdbf filter" {
    testdbf filter testf1 "F3 > 10"
} {testf1}

tcltest::test xbase-6.2 "create simple index filter" {
    testi1 filter testf2 "F3 > 10"
} {testf2}

tcltest::test xbase-6.3 "simple testdbf filter position" {
    set result [[testf1 dbf] size]
    lappend result [testf1 first]
    while {[testf1 next]} {
        lappend result [testdbf position]
    }
    lappend result [testf1 last]
    while {[testf1 prev]} {
        lappend result [testdbf position]
    }
    set result
} {3 1 2 3 3 2 1}

tcltest::test xbase-6.4 "simple index filter position" {
    set result [[testf2 dbf] size]
    lappend result [testf2 first]
    while {[testf2 next]} {
        lappend result [testdbf position]
    }
    lappend result [testf2 last]
    while {[testf2 prev]} {
        lappend result [testdbf position]
    }
    set result
} {3 1 2 3 3 2 1}

if {$tcl_version > 8.0} {

    #
    # UTF-8 conversion (cyrillic field name and value)
    #

    set testcyr_schema [list [list \u0410\u0411 C 2 0]]
    set testcyr_record [list [list \u0412\u0413]]

    tcltest::test xbase-8.1 "dbf encoding" {
        xbase dbf testcyr
        testcyr encoding cp866
    } {cp866}

    tcltest::test xbase-8.2 "dbf create cyrillic schema" {
        set result {}
        testcyr create -overlay testcyr $testcyr_schema
        lappend result [testcyr schema]
        testcyr encoding identity
        lappend result [encoding convertfrom cp866 [testcyr fields]]
        testcyr encoding cp866
        lappend result [testcyr fields]
    } [list \
           $testcyr_schema \
           [lindex [lindex $testcyr_schema 0] 0] \
           [lindex [lindex $testcyr_schema 0] 0]]

    tcltest::test xbase-8.3 "dbf append cyrillic value" {
        set result {}
        testcyr append $testcyr_record
    } $testcyr_record

    tcltest::test xbase-8.4 "dbf read cyrillic record" {
        testcyr goto 1
        testcyr record
    } $testcyr_record

    tcltest::test xbase-8.5 "dbf read cyrillic field cyrillic value" {
        set result {}
        testcyr goto 1
        testcyr field [lindex [lindex $testcyr_schema 0] 0]
    } $testcyr_record

    tcltest::test xbase-8.6 "cyrillic cleanup" {
        rename testcyr {}
        file delete testcyr.dbf
    } {}

} ;# endif $tcl_version > 8.0

tcltest::test xbase-9.1 "close dbf" {
    testdbf close
} {}

tcltest::test xbase-9.2 "delete dbf" {
    rename testdbf {}
} {}

tcltest::test xbase-9.3 "delete xbase" {
    xbase dbf test1
    xbase dbf test2
    xbase dbf test3
    xbase dbf test4
    rename xbase {}
} {}

tcltest::test xbase-9.4 "delete files" {
    file delete test.dbf
    file delete testi1.ndx
    file delete testi1.ntx
    file delete testi2.ndx
    file delete testi2.ntx
} {}

catch {tcltest::cleanupTests 0}
return
