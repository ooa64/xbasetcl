package require tcltest
package require xbasetcl

namespace import tcltest::*

test xbase-1.0 "syntax" -body {
    xbase foo
} -returnCodes 1 -result "bad command \"foo\": must be version, dateformat, encoding, log, list, dbf, or open"

test xbase-1.1 "version" {
    xbase version
} {4.1.4}

test xbase-1.2 "version abbrev" {
    xbase ver
} {4.1.4}

test xbase-1.3 "date format" {
    set result ""
    lappend result [xbase dateformat]
    lappend result [xbase dateform bla-bla-bla]
    lappend result [xbase date [lindex $result 0]]
} {MM/DD/YY bla-bla-bla MM/DD/YY}

test xbase-1.4 "encoding" {
    set result ""
    lappend result [xbase encoding]
    lappend result [xbase encod ascii]
    lappend result [xbase enc [lindex $result 0]]
} [list [encoding system] ascii [encoding system]]

test xbase-2.1 "dbf parameters error" -body {
    xbase dbf
} -returnCodes 1 -result "wrong # args: should be \"xbase dbf ?-dbf3|-dbf4? name\""

test xbase-2.2 "dbf object" -body {
    xbase dbf testd
} -cleanup {
    rename testd {}
} -result {testd}

test xbase-3.1 "open parameters error" -body {
    xbase open
} -returnCodes 1 -result "wrong # args: should be \"xbase open filename name ?alias?\""

test xbase-3.2 "open file not exists error" -body {
    xbase open notexists testd
} -returnCodes 1 -result "File not found"

test xbase-3.3 "open dbase3 file" -body {
    xbase open [file join [testsDirectory] fixtures dbase_03.dbf] testd
} -cleanup {
    testd close
    rename testd {}
} -result {testd}

#                           excel          cdbf           stackoverflow
# cp1251.dbf                invald ext     Visual FoxPro
# dbase_02.dbf              unknown format ~=
# dbase_03.dbf              open           dBase III      dBase III without memo file
# dbase_8b.dbf              open           dBase IV       dBase IV with memo file
# dbase_8c.dbf              invalid ext    ~=
# dbase_30.dbf              invalid ext    Visual FoxPro  Visual FoxPro
# dbase_31.dbf              invalid ext    Visual FoxPro  Visual FoxPro with AutoIncrement field
# dbase_32.dbf              invalid ext    Visual FoxPro
# dbase_83.dbf              open           dBase III      dBase III with memo file
# dbase_83_missing_memo.dbf open           dBase III
# dbase_f5.dbf              open           FoxPro         FoxPro with memo file
# polygon.dbf               open           Invalid header

foreach {f c r} {
    cp1251.dbf                    1 "Not an Xbase type database"
    dbase_02.dbf                  1 "Not an Xbase type database"
    dbase_03.dbf                  0 ""
    dbase_8b.dbf                  0 ""
    dbase_8c.dbf                  1 "Not an Xbase type database"
    dbase_30.dbf                  1 "Not an Xbase type database"
    dbase_31.dbf                  1 "Not an Xbase type database"
    dbase_32.dbf                  1 "Not an Xbase type database"
    dbase_83.dbf                  0 ""
    dbase_83_missing_memo.dbf     0 ""
    dbase_f5.dbf                  1 "Not an Xbase type database"
    polygon.dbf                   0 ""
} {
    test xbase-3.4-$f "open file not exists error" -body {
        xbase open [file join [testsDirectory] fixtures $f] testd
        testd close
        rename testd {}
    } -returnCodes $c -result $r
}

test xbase-4.1 "log syntax" -body {
    xbase log foo
} -returnCodes 1 -result "bad command \"foo\": must be directory, name, size, enabled, string, bytes, or flush"

test xbase-4.2 "log directory" -body {
    list \
        [xbase log directory] \
        [xbase log directory foo] \
        [xbase log directory] \
        [xbase log directory [file nativename ~/xbase64/logs]] \
        [xbase log directory]
} -result [list \
    [file nativename ~/xbase64/logs] \
    "foo" \
    "foo" \
    [file nativename ~/xbase64/logs] \
    [file nativename ~/xbase64/logs]]

test xbase-4.3 "log name" -body {
    list \
        [xbase log name] \
        [xbase log name foo] \
        [xbase log name] \
        [xbase log name xbLog.txt] \
        [xbase log name]
} -result [list \
    "Windows_x64.xbLog.txt" \
    "foo" \
    "foo" \
    "xbLog.txt" \
    "xbLog.txt"]

test xbase-4.4 "log size" -body {
    list \
        [xbase log size] \
        [xbase log size 1000] \
        [xbase log size] \
        [xbase log size 100000] \
        [xbase log size]
} -result [list \
    100000 \
    1000 \
    1000 \
    100000 \
    100000]

test xbase-4.5 "log enabled" -body {
    list \
        [xbase log enabled] \
        [xbase log enabled 1] \
        [xbase log enabled] \
        [xbase log enabled 0] \
        [xbase log enabled]
} -result [list \
    0 \
    1 \
    1 \
    0 \
    0]

test xbase-4.6 "log write" -setup {
    catch {file delete [file join [testsDirectory] tmp foo]}
    xbase log directory [file join [testsDirectory] tmp]
    xbase log name foo
    xbase log enabled true
} -body {
    xbase log string bar
    xbase log flush
    viewFile [xbase log name] [xbase log directory]
} -cleanup {
    xbase log enabled false
    xbase log name "xbLog.txt"
    xbase log directory [file nativename ~/xbase64/logs]
    catch {file delete [file join [testsDirectory] tmp foo]}
} -result {????-??-?? ??:??:?? - bar} -match glob

cleanupTests
