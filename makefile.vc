# makefile.vc for nmake
#
# Possible uses are:
#
# nmake -nologo -f makefile.vc [USE_TCL_STUBS=1] [STATIC_BUILD=1] [DEBUG=1]
#
# Xbase files required:
#
# $(XBASESRC)\makerules.vc  - common defines
# $(XBASESRC)\xbase\xbase.h       - header
# $(XBASESRC)\xbase\XXX\xbaseXXs.lib    - static lib
# $(XBASESRC)\xbase\XXX\xbaseXXsd.lib   - static debug lib
#

### Defaults

!ifndef XBASESRC
XBASESRC = ..\xbase
!endif

!include "$(XBASESRC)\makerules.vc"

!ifndef XBASEVERSION
XBASEVERSION = 21
!endif

!ifndef XBASESTATIC
XBASESTATIC = 1
!endif

!ifndef TCLROOT
TCLROOT	 = c:\activetcl
!endif

!ifndef TCLVERSION
TCLVERSION = 86
!endif

!ifndef USE_TCL_STUBS
!if "$(TCLVERSION)" == "80"
USE_TCL_STUBS = 0
!else
USE_TCL_STUBS = 1
!endif
!endif

!ifndef DEBUG
DEBUG = 0
!endif

!ifndef STATIC_BUILD
STATIC_BUILD = 0
!endif

!ifndef MSVCRT
MSVCRT = 1
!endif

!ifndef THREADS
THREADS = 0
!endif

!if "$(THREADS)" == "1"
TCL_DBGX = t
!endif

### Defines

NAMEPREFIX = xbasetcl
VERSION = 10

XBASETCLLIB = $(MACHINE)\$(NAMEPREFIX)$(VERSION)$(TCL_DBGX).lib
XBASETCLDLL = $(MACHINE)\$(NAMEPREFIX)$(VERSION)$(TCL_DBGX).dll
XBASETCLSHELL = $(MACHINE)\$(NAMEPREFIX)sh$(VERSION)$(TCL_DBGX).exe

TCLLIB = tcl$(TCLVERSION)$(TCL_DBGX).lib

DEFINES = $(DEFINES) -I"$(TCLROOT)\include" -I"$(XBASESRC)"
LIBS = $(LIBS) -libpath:"$(XBASESRC)\xbase\$(MACHINE)" -libpath:"$(TCLROOT)\lib"
LIBS = $(LIBS) msvcrt$(DBGX).lib msvcprt$(DBGX).lib

!if "$(DEBUG)" == "1"
#DEFINES = $(DEFINES) -DTCLCMD_DEBUG
DEFINES = $(DEFINES) -DTCLDBF_DEBUG
DEFINES = $(DEFINES) -DXBASE_DEBUG 
DEFINES = $(DEFINES) -DTCL_DEBUG=1
DEFINES = $(DEFINES) -DTCL_MEM_DEBUG=1
TCL_DBGX = tg
!endif

!if "$(THREADS)" == "1"
DEFINES = $(DEFINES) -DTCL_THREADS=1 -DUSE_THREAD_ALLOC=1
!endif

!if "$(STATIC_BUILD)" == "1"
DEFINES	= $(DEFINES) -DSTATIC_BUILD
TCL_DBGX = stg
!endif

!if "$(XBASESTATIC)" == "1"
LIBS = $(LIBS) xbase$(XBASEVERSION)s$(DBGX).lib
!else
DEFINES = $(DEFINES) -DXBUSINGDLL
LIBS = $(LIBS) xbase$(XBASEVERSION)$(DBGX).lib"
!endif

!if $(USE_TCL_STUBS) == 1
DEFINES	= $(DEFINES) -DUSE_TCL_STUBS=1
#LIBS	= $(LIBS) tclstub$(TCLVERSION)$(DBGX).lib
#LIBS	= $(LIBS) tclstub$(TCLVERSION).lib $(TCLLIB)
LIBS	= $(LIBS) $(TCLLIB) tclstub$(TCLVERSION).lib
!else
USESTUBS = 
LIBS	= $(LIBS) $(TCLLIB)
!endif

OBJS = \
	$(MACHINE)\xbasetcl.obj \
	$(MACHINE)\tclcmd.obj \
	$(MACHINE)\tclxbase.obj \
	$(MACHINE)\tcldbf.obj \
	$(MACHINE)\tclindex.obj \
	$(MACHINE)\tclfilter.obj

SHELL_OBJS = $(MACHINE)\xbaseAppInit.obj $(MACHINE)\tclAppInit.obj

# Rules

all : $(XBASETCLLIB)

shell: $(XBASETCLSHELL)

prepare:
    -@mkdir $(MACHINE) 2> NUL

clean :
	-del $(MACHINE)\*.obj
	-del $(MACHINE)\*.idb
	-del $(MACHINE)\*.ilk
	-del $(MACHINE)\*.pch
	-del $(MACHINE)\*.pdb
	-del $(MACHINE)\*.exp
	-del $(XBASETCLLIB)
	-del $(XBASETCLDLL)
	-del $(XBASETCLSHELL)
        -rmdir $(MACHINE)

!if "$(STATIC_BUILD)" == "1"

test : all shell
	$(SHELL) xbasetcl.test

$(XBASETCLLIB): prepare $(OBJS)
    $(libXX) -out:$@ $(OBJS)

!else

test : all
    set XBASETCLDLL=$(XBASETCLDLL)
    set HOME=$(TEMP)
    $(TCLROOT)\bin\tclsh$(TCLVERSION)$(TCL_DBGX) xbasetcl.test

$(XBASETCLLIB): $(XBASETCLDLL)
$(XBASETCLDLL): prepare $(OBJS)
    $(linkXX) $(ldebug) $(dlllflags) -out:$@ $(conlibsdll) $(LIBS) $(OBJS)

!endif

#$(XBASETCLSHELL): $(OBJS) tclAppInit.c xbaseAppInit.c tclsh.res
#    $(clXX) -nologo -EHsc $(cflags) -I"$(TCLROOT)\include" -I"$(XBASESRC)" \
#        /DTCL_LOCAL_APPINIT=Xbasetcl_AppInit tclAppInit.c xbaseAppInit.c \
#        $(OBJS) tclsh.res /link -out:$@ $(ldebug) $(conlflags) $(conlibsdll) $(LIBS)

$(XBASETCLSHELL): $(OBJS) $(SHELL_OBJS) tclsh.res
    $(linkXX) -nologo $(ldebug) $(conlflags) -out:$@ $(conlibsdll) $(LIBS) $(SHELL_OBJS) $(OBJS) tclsh.res 

$(MACHINE)\tclAppInit.obj: tclAppInit.c 
    $(clXX) -nologo -c -EHsc $(cflags) -I"$(TCLROOT)\include" /DTCL_LOCAL_APPINIT=Xbasetcl_AppInit -Fo$@ $?

$(MACHINE)\xbaseAppInit.obj: xbaseAppInit.c 
    $(clXX) -nologo -c -EHsc $(cflags) -I"$(TCLROOT)\include" -I"$(XBASESRC)" -Fo$@ $?

.rc.res:
    $(rc32) -fo $@ -r -i $(DEFINES) $<

